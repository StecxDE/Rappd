trigger:
- 'master'
- 'release'
- 'development'

pool:
  vmImage: 'windows-latest'

stages:

- stage: Build
  jobs:
  - job: PrepareSources
    displayName: Prepare Sources
    steps:
      - checkout: self
        fetchDepth: 0
      - task: UseDotNet@2
        displayName: Install .NET SDK 6.x
        inputs:
          packageType: 'sdk'
          version: '6.x'
      - task: AVersion@1
        inputs:
          repositoryPath: '$(Build.SourcesDirectory)'
      - script: |
          echo $(AVersion.Version)
          echo $(AVersion.Major)
          echo $(AVersion.Minor)
          echo $(AVersion.Patch)
          echo $(AVersion.Build)
      - script: |
          echo '##vso[task.setvariable variable=Version;isOutput=true]$(AVersion.Version)'
          echo '##vso[task.setvariable variable=Major;isOutput=true]$(AVersion.Major)'
          echo '##vso[task.setvariable variable=Minor;isOutput=true]$(AVersion.Minor)'
          echo '##vso[task.setvariable variable=Patch;isOutput=true]$(AVersion.Patch)'
          echo '##vso[task.setvariable variable=Build;isOutput=true]$(AVersion.Build)'
        name: VersionResult
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $manifestPath = @(Get-ChildItem -Path '$(Build.SourcesDirectory)/src' -Recurse -Include 'source.extension.vsixmanifest' | Select-Object -first 1)
            $manifestXml = [xml](Get-Content $manifestPath -Raw)
            $manifestXml.PackageManifest.Metadata.Identity.Version = $env:Version
            $manifestXml.save($manifestPath)
      - publish: $(Build.SourcesDirectory)
        artifact: Sources
  - job: BuildSources
    displayName: Build Sources
    dependsOn: PrepareSources
    steps:
      - checkout: none
      - download: current
        artifact: Sources
      - task: NuGetToolInstaller@1
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '$(Pipeline.Workspace)/Sources/src/**/Rappd.VisualStudio.csproj'
          feedsToUse: 'select'
          vstsFeed: '8ca3377a-8442-4cfd-a59e-3a4e0145faf9/978ff997-a2ff-4c4b-bb98-1dee8090e599'     
      - task: MSBuild@1
        inputs:
          solution: '$(Pipeline.Workspace)/Sources/src/**/Rappd.VisualStudio.csproj'
          msbuildArchitecture: 'x64'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Pipeline.Workspace)/Sources'
          Contents: '**/bin/**'
          TargetFolder: '$(Build.BinariesDirectory)'
          CleanTargetFolder: true
      - publish: $(Build.BinariesDirectory)
        artifact: Binaries
        
- stage: Publish
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn:
  - Build
  jobs:
    - job: PackExtension
      displayName: Pack Extension
      variables:
        Version: $[ replace(stageDependencies.Build.PrepareSources.outputs['VersionResult.Version'], '''', '') ]
      steps:
        - checkout: none
        - download: current
          artifact: Sources
        - download: current
          artifact: Binaries
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/Sources'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)'
            CleanTargetFolder: true
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/Binaries'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)'
        - task: NuGetToolInstaller@1
        - task: NuGetCommand@2
          inputs:
            command: 'restore'
            restoreSolution: '$(Pipeline.Workspace)/Sources/src/**/Rappd.VisualStudio.csproj'
            feedsToUse: 'select'
            vstsFeed: '8ca3377a-8442-4cfd-a59e-3a4e0145faf9/978ff997-a2ff-4c4b-bb98-1dee8090e599'     
        - task: MSBuild@1
          inputs:
            solution: '$(Build.SourcesDirectory)/src/**/Rappd.VisualStudio.csproj'
            msbuildArchitecture: 'x64'
            configuration: 'Release'
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)'
            Contents: '**/bin/**/*.vsix'
            TargetFolder: '$(Build.BinariesDirectory)'
        - publish: $(Build.BinariesDirectory)
          artifact: Extension
    - job: PushMarketplace
      displayName: Push Marketplace
      dependsOn: PackExtension
      condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/release'))
      steps:
        - checkout: none
        - download: current
          artifact: Extension
        