trigger:
- 'master'
- 'release'
- 'development'

pool:
  vmImage: 'ubuntu-latest'

stages:

- stage: Build
  jobs:
  - job: PrepareSources
    displayName: Prepare Sources
    steps:
      - checkout: self
      - task: UseDotNet@2
        displayName: Install .NET Core 3.1.x
        inputs:
          packageType: 'runtime'
          version: '3.1.x'
      - task: AVersion@1
        inputs:
          repositoryPath: '$(Build.SourcesDirectory)'
      - script: |
          echo $(AVersion.Version)
          echo $(AVersion.Major)
          echo $(AVersion.Minor)
          echo $(AVersion.Patch)
          echo $(AVersion.Build)
      - script: |
          echo '##vso[task.setvariable variable=Version;isOutput=true]$(AVersion.Version)'
          echo '##vso[task.setvariable variable=Major;isOutput=true]$(AVersion.Major)'
          echo '##vso[task.setvariable variable=Minor;isOutput=true]$(AVersion.Minor)'
          echo '##vso[task.setvariable variable=Patch;isOutput=true]$(AVersion.Patch)'
          echo '##vso[task.setvariable variable=Build;isOutput=true]$(AVersion.Build)'
        name: VersionResult
      - publish: $(Build.SourcesDirectory)
        artifact: Sources
  - job: BuildSources
    displayName: Build Sources
    dependsOn: PrepareSources
    variables:
      Major: $[ replace(dependencies.PrepareSources.outputs['VersionResult.Major'], '''', '') ]
      Minor: $[ replace(dependencies.PrepareSources.outputs['VersionResult.Minor'], '''', '') ]
      Patch: $[ replace(dependencies.PrepareSources.outputs['VersionResult.Patch'], '''', '') ]
      Build: $[ replace(coalesce(dependencies.PrepareSources.outputs['VersionResult.Build'], '0'), '''', '') ]
    steps:
      - checkout: none
      - download: current
        artifact: Sources
      - task: UseDotNet@2
        displayName: Install .NET SDK 6.x
        inputs:
          packageType: 'sdk'
          version: '6.x'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Pipeline.Workspace)/Sources/@(src|test)/**/Rappd.CQRS*.csproj'
          feedsToUse: 'select'
          vstsFeed: '8ca3377a-8442-4cfd-a59e-3a4e0145faf9/978ff997-a2ff-4c4b-bb98-1dee8090e599'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '$(Pipeline.Workspace)/Sources/@(src|test)/**/Rappd.CQRS*.csproj'
          arguments: '-c Release --no-restore /p:AssemblyVersion=$(Major).$(Minor).0.0 /p:FileVersion=$(Major).$(Minor).$(Patch).$(Build)'
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Pipeline.Workspace)/Sources'
          Contents: '**/bin/**'
          TargetFolder: '$(Build.BinariesDirectory)'
          CleanTargetFolder: true
      - publish: $(Build.BinariesDirectory)
        artifact: Binaries

- stage: Test
  dependsOn: Build
  jobs:
    - job: TestBinaries
      displayName: Test Binaries
      steps:
        - checkout: none
        - download: current
          artifact: Binaries
          patterns: '!**/ref/**'
        - task: UseDotNet@2
          displayName: Install .NET SDK 6.x
          inputs:
            packageType: 'sdk'
            version: '6.x'
        - task: DotNetCoreCLI@2
          inputs:
            command: 'test'
            projects: '$(Pipeline.Workspace)/Binaries/test/**/Rappd.CQRS*.dll'
            arguments: '-c Release --no-build'

- stage: Publish
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn:
  - Build
  - Test
  jobs:
    - job: PackBinaries
      displayName: Pack Binaries
      variables:
        Version: $[ replace(stageDependencies.Build.PrepareSources.outputs['VersionResult.Version'], '''', '') ]
      steps:
        - checkout: none
        - download: current
          artifact: Sources
        - download: current
          artifact: Binaries
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/Sources'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)'
            CleanTargetFolder: true
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/Binaries'
            Contents: '**'
            TargetFolder: '$(Build.SourcesDirectory)'
        - task: UseDotNet@2
          displayName: Install .NET SDK 6.x
          inputs:
            packageType: 'sdk'
            version: '6.x'
        - task: DotNetCoreCLI@2
          inputs:
            command: 'restore'
            projects: '$(Build.SourcesDirectory)/src/**/Rappd.CQRS*.csproj'
            feedsToUse: 'select'
            vstsFeed: '8ca3377a-8442-4cfd-a59e-3a4e0145faf9/978ff997-a2ff-4c4b-bb98-1dee8090e599'
        - task: DotNetCoreCLI@2
          inputs:
            command: 'pack'
            packagesToPack: '$(Build.SourcesDirectory)/src/**/Rappd.CQRS*.csproj'
            configuration: 'Release'
            packDirectory: '$(Build.BinariesDirectory)'
            nobuild: true
            versioningScheme: 'byEnvVar'
            versionEnvVar: 'Version'
        - publish: $(Build.BinariesDirectory)
          artifact: Packages
    - job: PushPackages
      displayName: Push Packages
      dependsOn: PackBinaries
      variables:
        Version: $[ replace(stageDependencies.Build.PrepareSources.outputs['VersionResult.Version'], '''', '') ]
      steps:
        - checkout: self
          fetchDepth: 0
          persistCredentials: true
        - download: current
          artifact: Packages
        - task: UseDotNet@2
          displayName: Install .NET SDK 6.x
          inputs:
            packageType: 'sdk'
            version: '6.x'
        - task: DotNetCoreCLI@2
          inputs:
            command: 'push'
            packagesToPush: '$(Pipeline.Workspace)/Packages/*.nupkg'
            nuGetFeedType: 'internal'
            publishVstsFeed: '8ca3377a-8442-4cfd-a59e-3a4e0145faf9/978ff997-a2ff-4c4b-bb98-1dee8090e599'
        - pwsh: |
             git config user.email $env:BUILD_REQUESTEDFOREMAIL
             git config user.name $env:BUILD_REQUESTEDFOR
             
             git tag -a $env:TAG -m "Released by $env:BUILD_REQUESTEDFOR"
             git push origin $env:TAG
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          env:
            TAG: v$(Version)